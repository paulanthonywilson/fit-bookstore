package com.cogenttps.common.testing;

import com.cogenttps.common.id.*;
import junit.framework.*;

/**
 */
public class TestIdGenerator extends TestCase
{

    int nextSourceId;
    int prepareForNewBatchCount;

    boolean throwExceptionWhilePreparingForBatch;

    public JdbcIdGenerator testee;
    private int throwExceptionWhenNextSourceIdWouldBeThis;
    private int throwErrorWhenNextSourceIdWouldBeThis;


    public void testIdReadFromSourceWithoutBatching() throws Exception
    {
        Assert.assertEquals(10, testee.getNewId());
        Assert.assertEquals(11, testee.getNewId());
        checkPrepareForBatchCountAndNextSourceId(2, 12);
    }


    public void testExternalChangeToSourceIdReflectedInNextBatch() throws Exception
    {
        nextSourceId = 50;
        Assert.assertEquals(50, testee.getNewId());
        nextSourceId = 60;
        Assert.assertEquals(60, testee.getNewId());
    }


    public void testReadAheadBatching() throws Exception
    {
        testee.setReadAheadBatchSize(2);
        Assert.assertEquals(10, testee.getNewId());
        checkPrepareForBatchCountAndNextSourceId(1, 12);

        Assert.assertEquals(11, testee.getNewId());
        checkPrepareForBatchCountAndNextSourceId(1, 12);

        Assert.assertEquals(12, testee.getNewId());
        checkPrepareForBatchCountAndNextSourceId(2, 14);

    }


    public void testExceptionOccursWhenPreparingForNewBatch() throws Exception
    {
        throwExceptionWhilePreparingForBatch = true;
        try
        {
            testee.getNewId();
            fail("Expecting exception");
        }
        catch (ARuntimeException e)
        {
        }

        throwExceptionWhilePreparingForBatch = false;
        Assert.assertEquals(10, testee.getNewId());
        checkPrepareForBatchCountAndNextSourceId(1, 12);

    }


    public void testExceptionInMiddleOfReadingIds() throws Exception
    {
        throwExceptionWhenNextSourceIdWouldBeThis = 11;
        checkExceptionOrErrorWhenReadingNewBatch();
    }

    public void testErrornInMiddleOfReadingIds() throws Exception
    {
        throwErrorWhenNextSourceIdWouldBeThis = 11;
        checkExceptionOrErrorWhenReadingNewBatch();
    }

    private void checkExceptionOrErrorWhenReadingNewBatch()
    {
        testee.setReadAheadBatchSize(2);
        try
        {
            testee.getNewId();
            fail("Expecting exception or error");
        }
        catch (ARuntimeException e) { }
        catch(Error e){}

        nextSourceId = 100;
        Assert.assertEquals(100, testee.getNewId());
    }


    protected void setUp() throws Exception
    {
        nextSourceId = 10;
        prepareForNewBatchCount = 0;
        throwExceptionWhilePreparingForBatch = false;
        throwExceptionWhenNextSourceIdWouldBeThis = throwErrorWhenNextSourceIdWouldBeThis = 0;

        testee = new JdbcIdGenerator()
        {
            protected void prepareForNewBatchOfIds()
            {
                if (throwExceptionWhilePreparingForBatch) throw new ARuntimeException();
                prepareForNewBatchCount++;
            }

            protected int readAnId()
            {
                if (nextSourceId == throwExceptionWhenNextSourceIdWouldBeThis) throw new ARuntimeException();
                if (nextSourceId == throwErrorWhenNextSourceIdWouldBeThis) throw new Error();
                return nextSourceId++;
            }
        };

    }

    private void checkPrepareForBatchCountAndNextSourceId(int expectedPrepareForNewBatchCount, int expectedNextSourceId)
    {
        assertEquals(expectedPrepareForNewBatchCount, prepareForNewBatchCount);
        assertEquals(expectedNextSourceId, expectedNextSourceId);
    }

    private class ARuntimeException extends RuntimeException
    {
    }
}
